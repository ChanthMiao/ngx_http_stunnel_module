diff --git a/src/http/ngx_http_parse.c b/src/http/ngx_http_parse.c
index 844054c9..1b5adf9f 100644
--- a/src/http/ngx_http_parse.c
+++ b/src/http/ngx_http_parse.c
@@ -107,6 +107,14 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
     enum {
         sw_start = 0,
         sw_method,
+#if (NGX_HTTP_PROXY_CONNECT)
+        sw_spaces_before_connect_host,
+        sw_connect_host_start,
+        sw_connect_host,
+        sw_connect_host_end,
+        sw_connect_host_ip_literal,
+        sw_connect_port,
+#endif
         sw_spaces_before_uri,
         sw_schema,
         sw_schema_slash,
@@ -246,6 +254,13 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
                         r->method = NGX_HTTP_OPTIONS;
                     }
 
+#if (NGX_HTTP_PROXY_CONNECT)
+                    if (ngx_str7_cmp(m, 'C', 'O', 'N', 'N', 'E', 'C', 'T', ' '))
+                    {
+                        r->method = NGX_HTTP_CONNECT;
+                    }
+#endif
+
                     break;
 
                 case 8:
@@ -267,6 +282,13 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
                 }
 
                 state = sw_spaces_before_uri;
+
+#if (NGX_HTTP_PROXY_CONNECT)
+                if (r->method == NGX_HTTP_CONNECT) {
+                    state = sw_spaces_before_connect_host;
+                }
+#endif
+
                 break;
             }
 
@@ -276,6 +298,111 @@ ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
 
             break;
 
+#if (NGX_HTTP_PROXY_CONNECT)
+        case sw_spaces_before_connect_host:
+
+            if (ch == ' ') {
+                break;
+            }
+
+            /* fall through */
+
+        case sw_connect_host_start:
+
+            r->connect_host_start = p;
+
+            if (ch == '[') {
+                state = sw_connect_host_ip_literal;
+                break;
+            }
+
+            state = sw_connect_host;
+
+            /* fall through */
+
+        case sw_connect_host:
+
+            c = (u_char) (ch | 0x20);
+            if (c >= 'a' && c <= 'z') {
+                break;
+            }
+
+            if ((ch >= '0' && ch <= '9') || ch == '.' || ch == '-') {
+                break;
+            }
+
+            /* fall through */
+
+        case sw_connect_host_end:
+
+            r->connect_host_end = p;
+
+            switch (ch) {
+            case ':':
+                state = sw_connect_port;
+                break;
+            default:
+                return NGX_HTTP_PARSE_INVALID_REQUEST;
+            }
+            break;
+
+        case sw_connect_host_ip_literal:
+
+            if (ch >= '0' && ch <= '9') {
+                break;
+            }
+
+            c = (u_char) (ch | 0x20);
+            if (c >= 'a' && c <= 'z') {
+                break;
+            }
+
+            switch (ch) {
+            case ':':
+                break;
+            case ']':
+                state = sw_connect_host_end;
+                break;
+            case '-':
+            case '.':
+            case '_':
+            case '~':
+                /* unreserved */
+                break;
+            case '!':
+            case '$':
+            case '&':
+            case '\'':
+            case '(':
+            case ')':
+            case '*':
+            case '+':
+            case ',':
+            case ';':
+            case '=':
+                /* sub-delims */
+                break;
+            default:
+                return NGX_HTTP_PARSE_INVALID_REQUEST;
+            }
+            break;
+
+        case sw_connect_port:
+            if (ch >= '0' && ch <= '9') {
+                break;
+            }
+
+            switch (ch) {
+            case ' ':
+                r->connect_port_end = p;
+                state = sw_host_http_09;
+                break;
+            default:
+                return NGX_HTTP_PARSE_INVALID_REQUEST;
+            }
+            break;
+#endif
+
         /* space* before URI */
         case sw_spaces_before_uri:
 
diff --git a/src/http/ngx_http_request.c b/src/http/ngx_http_request.c
index c88c2710..5e0d9413 100644
--- a/src/http/ngx_http_request.c
+++ b/src/http/ngx_http_request.c
@@ -30,6 +30,11 @@ static ngx_int_t ngx_http_process_connection(ngx_http_request_t *r,
 static ngx_int_t ngx_http_process_user_agent(ngx_http_request_t *r,
     ngx_table_elt_t *h, ngx_uint_t offset);
 
+#if (NGX_HTTP_PROXY_CONNECT)
+static ngx_int_t ngx_http_process_loc_uri(ngx_http_request_t *r,
+    ngx_table_elt_t *h, ngx_uint_t offset);
+#endif
+
 static ngx_int_t ngx_http_validate_host(ngx_str_t *host, ngx_pool_t *pool,
     ngx_uint_t alloc);
 static ngx_int_t ngx_http_set_virtual_server(ngx_http_request_t *r,
@@ -198,6 +203,11 @@ ngx_http_header_t  ngx_http_headers_in[] = {
     { ngx_string("Cookie"), offsetof(ngx_http_headers_in_t, cookies),
                  ngx_http_process_multi_header_lines },
 
+#if (NGX_HTTP_PROXY_CONNECT)
+    { ngx_string("Loc"), offsetof(ngx_http_headers_in_t, loc),
+                 ngx_http_process_loc_uri },
+#endif
+
     { ngx_null_string, 0, NULL }
 };
 
@@ -998,6 +1008,53 @@ ngx_http_process_request_line(ngx_event_t *rev)
                 return;
             }
 
+#if (NGX_HTTP_PROXY_CONNECT)
+
+            if (r->connect_host_start && r->connect_host_end) {
+
+                host.len = r->connect_host_end - r->connect_host_start;
+                host.data = r->connect_host_start;
+                rc = ngx_http_validate_host(&host, r->pool, 0);
+
+                if (rc == NGX_DECLINED) {
+                    ngx_log_error(NGX_LOG_INFO, c->log, 0,
+                                  "client sent invalid host in request line");
+                    ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
+                    return;
+                }
+
+                if (rc == NGX_ERROR) {
+                    ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
+                    return;
+                }
+
+                r->connect_host = host;
+
+                if (!r->connect_port_end) {
+                   ngx_log_error(NGX_LOG_INFO, c->log, 0,
+                                  "client sent no port in request line");
+                    ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
+                    return;
+                }
+
+                r->connect_port.data = r->connect_host_end + 1;
+                r->connect_port.len = r->connect_port_end
+                                      - r->connect_host_end - 1;
+
+                ngx_int_t port;
+
+                port = ngx_atoi(r->connect_port.data, r->connect_port.len);
+                if (port == NGX_ERROR || port < 1 || port > 65535) {
+                    ngx_log_error(NGX_LOG_INFO, c->log, 0,
+                                  "client sent invalid port in request line");
+                    ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
+                    return;
+                }
+
+                r->connect_port_n = port;
+            }
+#endif
+
             if (r->host_start && r->host_end) {
 
                 host.len = r->host_end - r->host_start;
@@ -1568,6 +1625,19 @@ ngx_http_alloc_large_header_buffer(ngx_http_request_t *r,
             r->schema_end = new + (r->schema_end - old);
         }
 
+#if (NGX_HTTP_PROXY_CONNECT)
+        if (r->connect_host_start) {
+            r->connect_host_start = new + (r->connect_host_start - old);
+            if (r->connect_host_end) {
+                r->connect_host_end = new + (r->connect_host_end - old);
+            }
+
+            if (r->connect_port_end) {
+                r->connect_port_end = new + (r->connect_port_end - old);
+            }
+        }
+#endif
+
         if (r->host_start) {
             r->host_start = new + (r->host_start - old);
             if (r->host_end) {
@@ -1773,6 +1843,23 @@ ngx_http_process_user_agent(ngx_http_request_t *r, ngx_table_elt_t *h,
     return NGX_OK;
 }
 
+#if (NGX_HTTP_PROXY_CONNECT)
+static ngx_int_t ngx_http_process_loc_uri(ngx_http_request_t *r,
+                                       ngx_table_elt_t *h, ngx_uint_t offset) {
+    ngx_str_t uri;
+    if (r->method != NGX_HTTP_CONNECT) {
+        return NGX_OK;
+    }
+    uri = h->value;
+    r->uri_start = uri.data;
+    r->uri_end = uri.data + uri.len;
+    if (ngx_http_parse_uri(r) != NGX_OK || ngx_http_process_request_uri(r) != NGX_OK) {
+        r->uri_start = r->uri_end = NULL;
+        return NGX_ERROR;
+    }
+    return NGX_OK;
+}
+#endif
 
 static ngx_int_t
 ngx_http_process_multi_header_lines(ngx_http_request_t *r, ngx_table_elt_t *h,
diff --git a/src/http/ngx_http_request.h b/src/http/ngx_http_request.h
index 39baa0f0..ceaffd0c 100644
--- a/src/http/ngx_http_request.h
+++ b/src/http/ngx_http_request.h
@@ -42,6 +42,10 @@
 #define NGX_HTTP_PATCH                     0x4000
 #define NGX_HTTP_TRACE                     0x8000
 
+#if (NGX_HTTP_PROXY_CONNECT)
+#define NGX_HTTP_CONNECT                   0x10000
+#endif
+
 #define NGX_HTTP_CONNECTION_CLOSE          1
 #define NGX_HTTP_CONNECTION_KEEP_ALIVE     2
 
@@ -230,6 +234,10 @@ typedef struct {
     ngx_table_elt_t                  *date;
 #endif
 
+#if (NGX_HTTP_PROXY_CONNECT)
+    ngx_table_elt_t *loc;
+#endif
+
     ngx_str_t                         user;
     ngx_str_t                         passwd;
 
@@ -410,6 +418,15 @@ struct ngx_http_request_s {
     ngx_str_t                         exten;
     ngx_str_t                         unparsed_uri;
 
+#if (NGX_HTTP_PROXY_CONNECT)
+    ngx_str_t                         connect_host;
+    ngx_str_t                         connect_port;
+    in_port_t                         connect_port_n;
+    u_char                           *connect_host_start;
+    u_char                           *connect_host_end;
+    u_char                           *connect_port_end;
+#endif
+
     ngx_str_t                         method_name;
     ngx_str_t                         http_protocol;
 
diff --git a/src/http/ngx_http_variables.c b/src/http/ngx_http_variables.c
index 2deb9689..5a0b717f 100644
--- a/src/http/ngx_http_variables.c
+++ b/src/http/ngx_http_variables.c
@@ -161,6 +161,14 @@ static ngx_int_t ngx_http_variable_time_local(ngx_http_request_t *r,
 
 static ngx_http_variable_t  ngx_http_core_variables[] = {
 
+#if (NGX_HTTP_PROXY_CONNECT)
+    { ngx_string("connect_host"), NULL, ngx_http_variable_request,
+      offsetof(ngx_http_request_t, connect_host), 0, 0 },
+
+    { ngx_string("connect_port"), NULL, ngx_http_variable_request,
+      offsetof(ngx_http_request_t, connect_port), 0, 0 },
+#endif
+
     { ngx_string("http_host"), NULL, ngx_http_variable_header,
       offsetof(ngx_http_request_t, headers_in.host), 0, 0 },
 
